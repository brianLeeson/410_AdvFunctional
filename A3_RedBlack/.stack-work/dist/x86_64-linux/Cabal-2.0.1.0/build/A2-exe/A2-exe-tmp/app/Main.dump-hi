
==================== FINAL INTERFACE ====================
2018-04-23 19:16:59.375462 UTC

interface main:Main 8022
  interface hash: 4bc2bf58ae5328f18edb61255a678537
  ABI hash: b8533bba0dc91b6246cc45becbd766b7
  export-list hash: 894e01b593a665de74eb72de19ec3678
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bc290d45427c85fe49627041d75aef0b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.deal
  Main.dealerTurn
  Main.draw
  Main.freshDeck
  Main.hitHand
  Main.main
  Main.parseMove
  Main.playerTurn
  Main.prettyPrint
  Main.prompt2
  Main.Move{Main.Hit Main.Stand}
module dependencies:
package dependencies: A2-0.1.0.0 array-0.5.2.0 base-4.10.1.0*
                      containers-0.5.10.2 deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 random-1.1* time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Set.Internal
import  -/  A2-0.1.0.0:A1 d67181fea39a2f54d6978e4e2bd127a8
import  -/  A2-0.1.0.0:Lib 4953364377bc1e12ae11ab3ca9a21c93
import  -/  base-4.10.1.0:Data.Char fe4e3458190deeac19969ce15e33bed9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.Exit dfc0230e6f69e5284631635d15ff33dc
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  random-1.1:System.Random 7425ef878fcdaaac7b607c0c2d51fc7c
12678d04fb4adc0e0f83a78702278a39
  $tc'Hit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13556111452587213285##
                   7704406183824707775##
                   Main.$trModule
                   Main.$tc'Hit2
                   0#
                   Main.$tc'Hit1) -}
4f0314d7fd809824470aea7d5137bb57
  $tc'Hit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
40dfbf7a5ab350d43703c0f586c8e33d
  $tc'Hit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Hit3) -}
2af5bd650ef8a2f0a57e9a5dc9ddd3cb
  $tc'Hit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Hit"#) -}
03639f27c0a98e6c34cec97eb46e833f
  $tc'Stand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4345753093850190658##
                   5391851729543986894##
                   Main.$trModule
                   Main.$tc'Stand1
                   0#
                   Main.$tc'Hit1) -}
b0c8b23e9fac8b2a7ce536bd64d3e872
  $tc'Stand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Stand2) -}
21a4c73fd292b1c9478f0f7a2a32dff0
  $tc'Stand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Stand"#) -}
486e1236e7dd2e00980e04a144af5f12
  $tcMove :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10105938754886598195##
                   4270085609825214153##
                   Main.$trModule
                   Main.$tcMove1
                   0#
                   GHC.Types.krep$*) -}
17add0102092ccab41612f5edf2c2302
  $tcMove1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcMove2) -}
af08cf167f3c2f112fc0f514471f846a
  $tcMove2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Move"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
56e548c37cf363ee59c8a4a7e9d6beb7
  $wshowl :: [A1.Card] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
4771d0f513bc56db81e8355caa71e032
  data Move = Hit | Stand
b0bc39d28cc47eb3b3fc4c74a4181e2f
  deal :: A1.Deck -> GHC.Types.IO (A1.Hand, A1.Deck)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.deal1
                  `cast`
                (<A1.Deck>_R
                 ->_R Sym (GHC.Types.N:IO[0] <(A1.Hand, A1.Deck)>_R)) -}
8195938586f4e76bfc8fc9d38f29cf80
  deal1 ::
    A1.Deck
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (A1.Hand, A1.Deck) #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (deck :: A1.Deck) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.deal2
                        (GHC.Types.[] @ A1.Card)
                        deck
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) hand remaingDeck ->
                 Main.deal2 hand remaingDeck ipv } }) -}
21ef9b2920c2a026b01ee26520856f38
  deal2 ::
    A1.Hand
    -> A1.Deck
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (A1.Hand, A1.Deck) #)
  {- Arity: 3, Strictness: <L,1*U><S,1*U><S,U>,
     Unfolding: (\ (hand :: A1.Hand)
                   (deck :: A1.Deck)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case deck of wild {
                   []
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.deal7
                             GHC.Types.True
                             s of ds1 { (#,#) ipv ipv1 ->
                      case Main.deal6 ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        []
                        -> case Main.deal3
                                  `cast`
                                (GHC.Types.N:IO[0] <(A1.Card, A1.Deck)>_R)
                                  ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                           case ipv5 of wild2 { (,) card remainingDeck ->
                           (# ipv4,
                              (GHC.Base.++
                                 @ A1.Card
                                 hand
                                 (GHC.Types.: @ A1.Card card (GHC.Types.[] @ A1.Card)),
                               remainingDeck) #) } }
                        : nCard nDeck
                        -> (# ipv2,
                              (GHC.Base.++
                                 @ A1.Card
                                 hand
                                 (GHC.Types.: @ A1.Card nCard (GHC.Types.[] @ A1.Card)),
                               nDeck) #) } } }
                   : card remainingDeck
                   -> (# s,
                         (GHC.Base.++
                            @ A1.Card
                            hand
                            (GHC.Types.: @ A1.Card card (GHC.Types.[] @ A1.Card)),
                          remainingDeck) #) }) -}
aef7fe1c9f0a66f001e949c7e12da0a5
  deal3 :: GHC.Types.IO (A1.Card, A1.Deck)
  {- Unfolding: (GHC.Magic.noinline
                   @ (forall a. [GHC.Types.Char] -> GHC.Types.IO a)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                   @ (A1.Card, A1.Deck)
                   Main.deal4) -}
181e95f606b710ed3141eb63b3d89242
  deal4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.deal5) -}
bbfa8d53ec608fd80a9674104abfd78a
  deal5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at app/Main.hs:25:7-21"#) -}
46bc2ea920dc05ed293d949fbbea5742
  deal6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, A1.Deck #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, System.Random.StdGen)
                        @ System.Random.StdGen
                        r#
                        System.Random.newStdGen2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { System.Random.StdGen ipv2 ipv3 ->
                 (# ipv,
                    A1.stripIndexList
                      @ GHC.Types.Int
                      @ A1.Card
                      (Data.OldList.sortBy
                         @ (A1.Indexed GHC.Types.Int A1.Card)
                         (A1.shuffle1 @ A1.Card)
                         (A1.createIndexList
                            @ GHC.Types.Int
                            @ A1.Card
                            (Main.deal_go b1)
                            A1.fullDeck)) #) } } }) -}
a53ee4d38a3eac06bfef0d2ba6daa455
  deal7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.deal8) -}
d28b5568d09f6d119953be63206e60ab
  deal8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shuffling a new deck."#) -}
32e02d32ca42b913bba98b8cbc7b0464
  deal_go :: System.Random.StdGen -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,U(U,U)>m2 -}
ea79839511411b87b8ccd2ca5ab2dbc9
  dealerTurn :: A1.Hand -> A1.Deck -> GHC.Types.IO (A1.Hand, A1.Deck)
  {- Arity: 3, Strictness: <S,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.dealerTurn1
                  `cast`
                (<A1.Hand>_R
                 ->_R <A1.Deck>_R
                 ->_R Sym (GHC.Types.N:IO[0] <(A1.Hand, A1.Deck)>_R)) -}
8f8a4cb55e6b2902dcc8a698092e7068
  dealerTurn1 ::
    A1.Hand
    -> A1.Deck
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (A1.Hand, A1.Deck) #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U> -}
d995168986f9b0842e057df7229988d0
  draw :: A1.Deck -> GHC.Types.IO (A1.Card, A1.Deck)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.draw1
                  `cast`
                (<A1.Deck>_R
                 ->_R Sym (GHC.Types.N:IO[0] <(A1.Card, A1.Deck)>_R)) -}
a8004454dcd43d16a9633cd54d899660
  draw1 ::
    A1.Deck
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (A1.Card, A1.Deck) #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (deck :: A1.Deck)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case deck of wild {
                   []
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Main.deal7
                             GHC.Types.True
                             eta of ds1 { (#,#) ipv ipv1 ->
                      case Main.deal6 ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        []
                        -> Main.deal3 `cast` (GHC.Types.N:IO[0] <(A1.Card, A1.Deck)>_R)
                             ipv2
                        : nCard nDeck -> (# ipv2, (nCard, nDeck) #) } } }
                   : card remainingDeck -> (# eta, (card, remainingDeck) #) }) -}
7a3e592049ce441b0570dea03b0ab5c6
  freshDeck :: GHC.Types.IO A1.Deck
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.deal6 `cast` (Sym (GHC.Types.N:IO[0] <A1.Deck>_R)) -}
b9c7cbc9e26d6aac91a5bdb00931f5c7
  hitHand :: A1.Hand -> A1.Deck -> GHC.Types.IO (A1.Hand, A1.Deck)
  {- Arity: 3, Strictness: <L,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.deal2
                  `cast`
                (<A1.Hand>_R
                 ->_R <A1.Deck>_R
                 ->_R Sym (GHC.Types.N:IO[0] <(A1.Hand, A1.Deck)>_R)) -}
20d14b8a759d3337cf2d7d1123432a2e
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
cc12de83f81e8e3152b1cae4a0dc4f7d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True) -}
a18347f228bce777b23b39cd7fbb4eee
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
566cb2576c7bf55998e2625ce7f76625
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hello, World!"#) -}
3fc2e9ae727fdeb856aca6e9882cdcc8
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
86f71cca5839179c60e79ca84179a77c
  parseMove :: GHC.Base.String -> GHC.Base.Maybe Main.Move
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 case GHC.Base.eqString ds Main.parseMove5 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString ds Main.parseMove3 of wild1 {
                        GHC.Types.False -> GHC.Base.Nothing @ Main.Move
                        GHC.Types.True -> Main.parseMove2 }
                   GHC.Types.True -> Main.parseMove1 }) -}
4b5f490ff0d01d49e0bc7291c5280ae7
  parseMove1 :: GHC.Base.Maybe Main.Move
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ Main.Move Main.Hit) -}
ef3535c1600b01568c8644296917e193
  parseMove2 :: GHC.Base.Maybe Main.Move
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ Main.Move Main.Stand) -}
e9cb2e682c69b72c389cece8b9a08a1b
  parseMove3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.parseMove4) -}
edc7759a7e09dda26aa03dcdde8ff83b
  parseMove4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("stand"#) -}
5988d73a005c20f491d30d55a1d53f70
  parseMove5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.parseMove6) -}
94b9a558897aff13fa779d3f1258d073
  parseMove6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("hit"#) -}
4a3839556cab5b608e312a211d3523c3
  playerTurn :: A1.Hand -> A1.Deck -> GHC.Types.IO (A1.Hand, A1.Deck)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.playerTurn1
                  `cast`
                (<A1.Hand>_R
                 ->_R <A1.Deck>_R
                 ->_R Sym (GHC.Types.N:IO[0] <(A1.Hand, A1.Deck)>_R)) -}
58c06751a166ab1a1304cd8d04a6854d
  playerTurn1 ::
    A1.Hand
    -> A1.Deck
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (A1.Hand, A1.Deck) #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ (hand :: A1.Hand) (deck :: A1.Deck) ->
                 Main.playerTurn7
                   @ Main.Move
                   @ (A1.Hand, A1.Deck)
                   (GHC.CString.unpackAppendCString#
                      Main.playerTurn6
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (Main.prettyPrint hand)
                         Main.playerTurn4))
                   Main.playerTurn2
                   Main.parseMove
                   (let {
                      lvl6 :: (A1.Hand, A1.Deck) = (hand, deck)
                    } in
                    letrec {
                      playerAction :: Main.Move
                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            (A1.Hand, A1.Deck) #)
                        {- Arity: 2, Strictness: <S,1*U><S,U> -}
                      = \ (move :: Main.Move)
                          (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                        case move of wild {
                          Main.Hit
                          -> case Main.deal2 hand deck eta of ds1 { (#,#) ipv ipv1 ->
                             case ipv1 of wild1 { (,) hand1 deck1 ->
                             case A1.$whandValue hand1 of ww { DEFAULT ->
                             let {
                               $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, (A1.Hand, A1.Deck) #)
                                 <join 0>
                               = Main.playerTurn7
                                   @ Main.Move
                                   @ (A1.Hand, A1.Deck)
                                   (GHC.CString.unpackAppendCString#
                                      Main.playerTurn6
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         (Main.prettyPrint hand1)
                                         Main.playerTurn4))
                                   Main.playerTurn2
                                   Main.parseMove
                                   playerAction
                                     `cast`
                                   (<Main.Move>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <(A1.Hand, A1.Deck)>_R))
                                   ipv
                             } in
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.<# ww 21#) of wild2 {
                               GHC.Types.False -> case ww of wild3 { DEFAULT -> ds1 21# -> $j }
                               GHC.Types.True -> $j } } } }
                          Main.Stand -> (# eta, lvl6 #) }
                    } in
                    playerAction
                      `cast`
                    (<Main.Move>_R
                     ->_R Sym (GHC.Types.N:IO[0] <(A1.Hand, A1.Deck)>_R)))) -}
9567a1dac40306c3db61de457d72c49a
  playerTurn2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.playerTurn3) -}
e6509d5c1171f2e9aca092278720b468
  playerTurn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You can either hit or stand"#) -}
b58e2745c8a43e7f78f16f482a36b7a8
  playerTurn4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.playerTurn5) -}
4c687d66578562e28a78ce526eabd534
  playerTurn5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", what do you do?"#) -}
1e44d69cd10fe08a4940b7153eaf8cd7
  playerTurn6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Your hand is "#) -}
db25a8652dddc49331b07079e453f4e1
  playerTurn7 ::
    GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String -> GHC.Base.Maybe a)
    -> (a -> GHC.Types.IO b)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,C(U)><L,1*C1(C1(U(U,U)))><S,U> -}
7cc62e9b2a4166cc6f3bcda4d52aca2c
  prettyPrint :: A1.Hand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (hand :: A1.Hand) ->
                 let {
                   arg :: [GHC.Types.Char]
                   = GHC.CString.unpackAppendCString#
                       Main.prettyPrint4
                       (case A1.$whandValue hand of ww { DEFAULT ->
                        case GHC.Show.$wshowSignedInt
                               0#
                               ww
                               (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                        GHC.Base.++
                          @ GHC.Types.Char
                          (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                          Main.prettyPrint2 } })
                 } in
                 case hand of wild {
                   [] -> GHC.Base.++ @ GHC.Types.Char Main.prettyPrint1 arg
                   : x xs
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.showList__3
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (A1.$fShowCard_$cshow x)
                              (case Main.$wshowl xs of ww { (#,#) ww1 ww2 ->
                               GHC.Types.: @ GHC.Types.Char ww1 ww2 })))
                        arg }) -}
b232c7570e7b8d5405f02fde523f8aff
  prettyPrint1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   GHC.Show.showList__4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9ac89666507902f429e068a58053a3e7
  prettyPrint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.prettyPrint3) -}
e220e1184dbc0669a35f865ec38297da
  prettyPrint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
5bfa952a107d9f85d678905bd166ac87
  prettyPrint4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" ("#) -}
4e6d53c513d50b855496b219ad583e84
  prompt2 ::
    GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String -> GHC.Base.Maybe a)
    -> (a -> GHC.Types.IO b)
    -> GHC.Types.IO b
  {- Arity: 5,
     Strictness: <L,U><L,U><L,C(U)><L,1*C1(C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.playerTurn7
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String -> GHC.Base.Maybe a>_R
                 ->_R <a -> GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0] <b>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

